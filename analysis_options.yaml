# This file configures the analyzer to use the lint rule set from `package:lint`

include: package:lint/strict.yaml # For production apps
# include: package:lint/casual.yaml # For code samples, hackathons and other non-production code
# include: package:lint/package.yaml # Use this for packages with public API


# You might want to exclude auto-generated files from dart analysis
analyzer:
  exclude:
  - '**.freezed.dart'
  - '**.g.dart'
  - "test/.test_coverage.dart"
  - "bin/cache/**"
  - "lib/generated_plugin_registrant.dart"
  - "**/KitchenModeEvents.dart"

  language:
    strict-casts: true
    strict-inference: false
    strict-raw-types: false
# You can customize the lint rules set to your own liking. A list of all rules
# can be found at https://dart-lang.github.io/linter/lints/options/options.html
  errors:
    # Without ignore here, we cause import of all_lint_rules to warn, because some rules conflict.
    # We explicitly enabled even conflicting rules and are fixing the conflicts in this file.
    # Put it to warning temporarily if you need troubleshoot lint rule settings.
    included_file_warning: ignore

    # Treat missing required parameters as an error, not as a hint or a warning.
    missing_required_param: error

    # Treat missing returns as an error, not as a hint or a warning.
    missing_return: error

    # Allow self-reference to deprecated members. This is done because otherwise we have
    # to annotate every member in every test, assert, etc., when we deprecate something.
    deprecated_member_use_from_same_package: ignore

    # DON'T assign new values to parameters of methods or functions.
    # https://dart-lang.github.io/linter/lints/parameter_assignments.html
    parameter_assignments: warning

    # Allow having TODOs in the code.
    todo: ignore
linter:
  rules:
    avoid_web_libraries_in_flutter: true
    prefer_void_to_nul: true
    always_use_package_imports: true
    avoid_empty_else: true
    no_duplicate_case_values: true
    unsafe_html: true
    avoid_final_parameters: true
    camel_case_types: true
    constant_identifier_names: false
    empty_catches: true
    avoid_positional_boolean_parameters: false
    eol_at_end_of_file: false
    prefer_conditional_assignment: false
    file_names: false
    unnecessary_overrides: false
    avoid_dynamic_calls: false
    avoid_multiple_declarations_per_line: false
    noop_primitive_operations: false
    prefer_interpolation_to_compose_strings: false
    use_setters_to_change_properties: false
  # Util classes are awesome!
  # avoid_classes_with_only_static_members: false

  # Make constructors the first thing in every class
  # sort_constructors_first: true

  # Choose wisely, but you don't have to
  #prefer_double_quotes: true
  # prefer_single_quotes: true